{"version":3,"sources":["components/Data/Data.js","components/Landing/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Data","props","useState","isLoaded","setIsLoaded","items","setItems","isIndiaLoaded","setIsIndiaLoaded","indiaItems","setIndiaItems","useEffect","fetch","then","res","json","result","regionData","filteredItems","filter","cur","country","toLowerCase","includes","term","filteredIndiaItems","region","Accordion","className","defaultActiveKey","Card","Toggle","as","Header","eventKey","id","Collapse","Body","Table","striped","bordered","responsive","map","index","cases","active","deaths","todayCases","todayDeaths","recovered","totalInfected","activeCases","deceased","newInfected","newDeceased","Landing","location","setLocation","data","setData","worldData","setWorldData","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","countryIndex","i","features","length","TempName","place_name","console","log","Jumbotron","Container","Row","Col","md","critical","Button","variant","size","onClick","window","open","App","searchValue","setSearchValue","Navbar","expand","sticky","Brand","href","aria-controls","Nav","Link","Form","inline","FormControl","type","placeholder","onChange","Event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88859ba2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Table, Accordion, Card } from 'react-bootstrap';\r\nfunction Data(props) {\r\n      const [isLoaded, setIsLoaded] = useState(false);\r\n      const [items, setItems] = useState([]);\r\n      const [isIndiaLoaded, setIsIndiaLoaded] = useState(true);\r\n      const [indiaItems, setIndiaItems] = useState([]);\r\n\r\n      // get gobal data\r\n      useEffect(() => {\r\n            fetch(\"https://coronavirus-19-api.herokuapp.com/countries\")\r\n                  .then(res => res.json())\r\n                  .then(\r\n                        (result) => {\r\n                              setIsLoaded(true);\r\n                              setItems(result);\r\n                        },\r\n                  )\r\n      }, [])\r\n      \r\n      // get India Data\r\n      // https://api.covid19india.org/state_district_wise.json\r\n      useEffect(() => {\r\n            fetch(\"https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true\")\r\n                  .then(res => res.json())\r\n                  .then(\r\n                        (result) => {\r\n                              setIsIndiaLoaded(true);\r\n                              setIndiaItems(result.regionData);\r\n                        },\r\n                  );\r\n      }, [])\r\n      const filteredItems = items.filter((cur) => {\r\n            return (cur.country.toLowerCase().includes(props.term.toLowerCase()))\r\n      })\r\n      const filteredIndiaItems = indiaItems.filter((cur) => {\r\n            return (cur.region.toLowerCase().includes(props.term.toLowerCase()))\r\n      })\r\n      return (\r\n      <Accordion className=\"text-center\" defaultActiveKey=\"0\">\r\n        <Card>\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"0\" id=\"worldTable\">\r\n            World Data\r\n    </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n            <Table striped bordered responsive>\r\n                  {/* Headers */}\r\n                  <thead>\r\n                        <tr>\r\n                              <th>Country</th>\r\n                              <th>Cases</th>\r\n                              <th>Active</th>\r\n                              <th>Deaths</th>\r\n                              <th>New Cases</th>\r\n                              <th>New Deaths</th>\r\n                              <th>Recovered</th>\r\n                              <th>Mortality Rate</th>\r\n                        </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                        {(!isLoaded) && <p>Loading...</p>}\r\n                        {(isLoaded)&&\r\n                              filteredItems.map((cur, index) => {\r\n                                    return (\r\n                                          <tr className=\"Data-Elem\" key={index}>\r\n                                                <td className=\"country\">{cur.country}</td>\r\n                                                <td className=\"cases\"> {cur.cases}</td>\r\n                                                <td className= \"active-cases\">{cur.active}</td>\r\n                                                <td className=\"deaths text-danger\">{cur.deaths}</td>\r\n                                                <td className=\"todayCases\">{cur.todayCases}</td>\r\n                                                <td className=\"todayDeaths text-danger\" >{cur.todayDeaths}</td>\r\n                                                <td className=\"recovered text-success\">{cur.recovered}</td>\r\n                                                <td>{((cur.deaths /cur.cases)>=0.02)&&(<p className=\"text-danger\">High</p>)}\r\n                                                {((cur.deaths /cur.cases)>=0.015 && (cur.deaths /cur.cases)<0.02)&&(<p className=\"text-warning\">Moderate</p>)}\r\n                                                {((cur.deaths /cur.cases)<0.015)&&(<p className=\"text-success\">Low</p>)}\r\n                                                </td>\r\n                                          </tr>\r\n                                    )\r\n                              })\r\n                        }\r\n                  </tbody>\r\n            </Table>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n          <Accordion.Toggle as={Card.Header} eventKey=\"1\" id=\"indiaTable\">\r\n            India Data\r\n    </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n            <Table striped bordered responsive>\r\n                  {/* Headers */}\r\n                  <thead>\r\n                        <tr>\r\n                              <th>State</th>\r\n                              <th>Cases</th>\r\n                              <th>Active</th>\r\n                              <th>Deaths</th>\r\n                              <th>Change In Cases</th>\r\n                              <th>New Deaths</th>\r\n                              <th>Recovered</th>\r\n                              <th>Severity</th>\r\n                        </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                        {(!isIndiaLoaded)&& <p>Loading...</p>}\r\n                        {(isIndiaLoaded)&&\r\n                              filteredIndiaItems.map((cur, index) => {\r\n                                    return (\r\n                                          <tr className=\"Data-Elem\" key={index}>\r\n                                                <td className=\"country\">{cur.region}</td>\r\n                                                <td className=\"cases\"> {cur.totalInfected}</td>\r\n                                                <td className=\"active-cases\">{cur.activeCases}</td>\r\n                                                <td className=\"deaths text-danger\">{cur.deceased}</td>\r\n                                                <td className=\"todayCases\">{cur.newInfected}</td>\r\n                                                <td className=\"todayDeaths text-danger\" >{cur.newDeceased}</td>\r\n                                                <td className=\"recovered text-success\">{cur.recovered}</td>\r\n                                                <td>\r\n                                                {\r\n                                                      (cur.newInfected < -0.01*cur.totalInfected) && (\r\n                                                            <p className=\"text-success\">Green Zone</p>)\r\n                                                }\r\n                                                {\r\n                                                      ((cur.newInfected <= 0) && !(cur.newInfected < -0.01*cur.totalInfected)) && (\r\n                                                            <p className=\"text-warning\">Orange Zone</p>\r\n                                                      )\r\n                                                }\r\n                                                {\r\n                                                      ((cur.newInfected >= 0)) && (\r\n                                                      <p className=\"text-danger\">Red Zone</p>\r\n                                                      )\r\n                                                }\r\n\r\n                                                </td>\r\n                                          </tr>\r\n                                    )\r\n                              })\r\n                        }\r\n                  </tbody>\r\n            </Table>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n      );\r\n}\r\n\r\nexport default Data\r\n","import React, { useEffect , useState } from 'react'\r\nimport { Container, Row, Col, Jumbotron, Button} from 'react-bootstrap'\r\nfunction Landing() {\r\n    const [location, setLocation] = useState(\"Enable Location\")\r\n    const [data, setData] = useState([])\r\n    const [worldData, setWorldData]= useState([])\r\n\r\n    // Get Location Data\r\n    useEffect(()=>{\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                // Get the coordinates of the current position.\r\n                var lat = position.coords.latitude;\r\n                var lng = position.coords.longitude;\r\n                // console.log(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+ lng + \",\" + lat + \".json?&access_token=pk.eyJ1IjoibG9oaXQyNDQiLCJhIjoiY2twNWZoZ3MzMHU4YjJ4cjJkcWhvZWZvNiJ9.qrQoAp1hwFBvf98GYdvh1Q\")\r\n                fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+ lng + \",\" + lat + \".json?&access_token=pk.eyJ1IjoibG9oaXQyNDQiLCJhIjoiY2twNWZoZ3MzMHU4YjJ4cjJkcWhvZWZvNiJ9.qrQoAp1hwFBvf98GYdvh1Q\")\r\n                .then(res => res.json())\r\n                .then(\r\n                                (result) => {\r\n                                    var countryIndex = 0;\r\n                                    for(var i = 0;i<result.features.length;i++){\r\n                                        if(result.features[i].id.includes(\"country\")){\r\n                                            countryIndex = i;\r\n                                        }\r\n                                    }\r\n                                    var TempName = result.features[countryIndex].place_name\r\n                                    if (TempName===\"United Kingdom\"){\r\n                                        TempName = \"UK\";\r\n                                    }\r\n                                    if (TempName===\"United Arab Emirates\"){\r\n                                        TempName = \"UAE\";\r\n                                    }\r\n                                    if (TempName===\"Democratic Republic of Congo\"){\r\n                                        TempName = \"DRC\";\r\n                                    }\r\n                                    setLocation(TempName);\r\n                                },\r\n                    )\r\n                fetch(\"https://coronavirus-19-api.herokuapp.com/countries/\" + location)\r\n                .then(res=> res.json())\r\n                .then(\r\n                    (result)=>{\r\n                        setData(result)\r\n                    }\r\n                )\r\n            });\r\n            \r\n        }\r\n        else {\r\n            console.log(\"No Location\")\r\n        }\r\n    \r\n    },[location])\r\n\r\n    // Get World Data\r\n    useEffect(()=>{\r\n        fetch(\"https://coronavirus-19-api.herokuapp.com/all\")\r\n        .then(res =>res.json())\r\n        .then(\r\n            (result)=>{\r\n                setWorldData(result)\r\n            }\r\n        )\r\n    },[])\r\n    return (\r\n        <Jumbotron id=\"home\" className=\"d-flex flex-column align-items-center\">\r\n        <Container className=\"text-center\" >\r\n            <Row>\r\n                <Col md={6}>\r\n                    <h1> {location}</h1>\r\n                    <h6>Total : {data.cases}</h6>\r\n                    <h6> Active: {data.active}</h6>\r\n                    <h6> New Cases: {data.todayCases}</h6>\r\n                    <h6> Deaths: {data.deaths}</h6>\r\n                    <h6> Critical: {data.critical}</h6>\r\n                    <h6> Recovered : {data.recovered}</h6>\r\n                    </Col>\r\n                <Col md={6}>\r\n                    <h1>Global</h1>\r\n                    <h6>Cases : {worldData.cases}</h6>\r\n                    <h6> Deaths: {worldData.deaths}</h6>\r\n                    <h6> Recovered: {worldData.recovered}</h6>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        <Button className=\"LearnButton\" variant=\"outline-primary\" size=\"lg\" onClick={()=>{\r\n            window.open(\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/advice-for-public\")\r\n        }}>Learn more</Button>\r\n        </Jumbotron>\r\n    )\r\n}\r\nexport default Landing","import React, { useState } from 'react'\nimport './App.css';\nimport Data from './components/Data/Data'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, FormControl,  Nav, Form } from \"react-bootstrap\"\nimport Landing from './components/Landing/Landing';\nfunction App() {\n  const [searchValue, setSearchValue] = useState(\"\")\n  return (\n    <div className=\"App\">\n      {/* Navbar */}\n      <Navbar className=\"customNav\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n        <Navbar.Brand href=\"#home\">Covid Tracker</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#worldTable\" variant=\"dark\">World Data</Nav.Link>\n            <Nav.Link href=\"#indiaTable\" variant=\"dark\">India Data</Nav.Link>\n          </Nav>\n          <Form inline>\n          <FormControl type=\"search\" placeholder=\"Search\" className=\"w-100\" onChange={(Event) => {\n            setSearchValue(Event.target.value);\n          }} value={searchValue} />\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      {/* Home */}\n      <Landing/>\n      {/* Data Sheets */}\n      <Data term={searchValue} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}